// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Services;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250411131119_AddedRankedFlexDataToPlayer")]
    partial class AddedRankedFlexDataToPlayer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlayerRace", b =>
                {
                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.Property<int>("RacesId")
                        .HasColumnType("int");

                    b.HasKey("PlayersId", "RacesId");

                    b.HasIndex("RacesId");

                    b.ToTable("PlayerRace");
                });

            modelBuilder.Entity("backend.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AddedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ChallengesData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampionStatsFlexData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChampionStatsSoloDuoData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClashData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntriesData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlexMatchesData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlexMatchesDetailsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlayerData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredFlexRoleData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredSoloDuoRoleData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Puuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RankedMatchesData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoloDuoMatchesData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoloDuoMatchesDetailsData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpectatorData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummonerData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummonerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SummonerTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopMasteriesData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("backend.Models.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("PlayerRace", b =>
                {
                    b.HasOne("backend.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Race", null)
                        .WithMany()
                        .HasForeignKey("RacesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
